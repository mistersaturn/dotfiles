#+TITLE: XMonad Window Manager Configuration
#+DESCRIPTION: Configuration for XMonad Window Manager written in Haskell
#+AUTHOR: Dean Smith
#+DATE: Wed Mar 21 2025
#+PROPERTY: header-args :tangle xmonad.hs

* Imports
Import libraries here:

** Hooks

#+BEGIN_SRC haskell
import XMonad
import XMonad.Actions.Submap
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.SetWMName
import XMonad.Hooks.DynamicLog
#+END_SRC

** Layout / Prompt

#+BEGIN_SRC haskell
import XMonad.Layout.Spacing
import XMonad.Layout.ThreeColumns
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Prompt.OrgMode
#+END_SRC

** Utilities

#+BEGIN_SRC haskell
import XMonad.Util.Run
import XMonad.Util.EZConfig
import XMonad.Util.NamedScratchpad
import XMonad.Util.SpawnOnce
#+END_SRC

** System

#+BEGIN_SRC haskell
import System.IO (Handle, hPutStrLn)
import System.Exit (exitSuccess)
#+END_SRC

** Stack Set

#+BEGIN_SRC haskell
import qualified XMonad.StackSet as W
#+END_SRC

* Defaults
Handle default values here to be used in code later:

#+BEGIN_SRC haskell
myTerminal :: String
myTerminal = "xfce4-terminal"

myBorderWidth :: Dimension
myBorderWidth = 2


myNormalBorderColor :: String
myNormalBorderColor = "#1d1f21"

myFocusedBorderColor :: String
myFocusedBorderColor = "#EC93D3"

-- Color definitions
background, currentLine, selection, foreground :: String
comment, red, orange, yellow, green, aqua, blue, purple :: String
background  = "#1d1f21"
currentLine = "#393939"
selection   = "#515151"
foreground  = "#eaeaea"
comment     = "#999999"
red         = "#d54e53"
orange      = "#e78c45"
yellow      = "#e7c547"
green       = "#b9ca4a"
aqua        = "#70c0b1"
blue        = "#7aa6da"
purple      = "#c397d8"
pink        = "#EC93D3"
#+END_SRC

* Main

** Initial
Main function that spawns Xmobar, etcetera.

#+BEGIN_SRC haskell
main :: IO ()
main = do
    xmproc <- spawnPipe "xmobar ~/.config/xmobar/xmobarrc"
    xmonad $ ewmhFullscreen $ ewmh $ docks myConfig { logHook = dynamicLogWithPP $ myXmobarPP xmproc }
#+END_SRC

** Config
Handle global configuration values here:

#+BEGIN_SRC haskell
myConfig = def
    { modMask            = mod4Mask
    , terminal           = myTerminal
    , layoutHook         = myLayout
    , manageHook         = myManageHook
    , startupHook        = myStartupHook
    , borderWidth        = myBorderWidth
    , normalBorderColor  = myNormalBorderColor
    , focusedBorderColor = myFocusedBorderColor
    , workspaces         = myWorkspaces
    }
    `additionalKeysP` myKeys
#+END_SRC

** Workspaces

#+BEGIN_SRC haskell
myWorkspaces :: [String]
myWorkspaces = ["idle", "www", "dev", "media", "gfx"]
#+END_SRC

** Keybindings (Global)

#+BEGIN_SRC haskell
myKeys :: [(String, X ())]
myKeys =
    -- Launch applications
    [ ("M-<Return>", spawn myTerminal)
    , ("M-S-<Return>", windows W.swapMaster)
    , ("M-d", spawn "rofi -show drun")
    , ("M-S-d", spawn "rofi -show run")
    , ("M-b", spawn "librewolf")
    , ("M-S-b", spawn (myTerminal ++ " -e links"))

    -- System controls
    , ("M-C-r", spawn "xmonad --recompile; xmonad --restart")
    , ("M-S-q", io exitSuccess)
    , ("M-S-c", kill)

    -- Volume controls
    , ("<XF86AudioRaiseVolume>", spawn "pactl set-sink-volume @DEFAULT_SINK@ +5%")
    , ("<XF86AudioLowerVolume>", spawn "pactl set-sink-volume @DEFAULT_SINK@ -5%")
    , ("<XF86AudioMute>", spawn "pactl set-sink-mute @DEFAULT_SINK@ toggle")

    -- Brightness controls
    , ("<XF86MonBrightnessUp>", spawn "xbacklight -inc 10")
    , ("<XF86MonBrightnessDown>", spawn "xbacklight -dec 10")

    -- Screenshots
    , ("M-<Print>", spawn "scrot -s ~/Pictures/screenshot_%Y-%m-%d_%H-%M-%S.png")
    , ("<Print>", spawn "scrot ~/Pictures/screenshot_%Y-%m-%d_%H-%M-%S.png")

    -- Org-mode integration
    , ("M-S-t", orgPrompt def "TODO" "~/org/todos.org")
    , ("M-S-n", orgPrompt def "NOTE" "~/org/notes.org")

    -- Scratchpads
    , ("M-C-m", namedScratchpadAction myScratchPads "cmus")
    , ("M-C-<Return>", namedScratchpadAction myScratchPads "terminal")
    , ("M-C-h", namedScratchpadAction myScratchPads "htop")

    -- Layout controls
    , ("M-<Space>", sendMessage NextLayout)
    , ("M-S-<Space>", asks config >>= setLayout . layoutHook)
    , ("M-f", withFocused $ windows . W.sink) -- Un-float focused window

    -- Window navigation
    , ("M-j", windows W.focusDown)
    , ("M-k", windows W.focusUp)
    , ("M-S-j", windows W.swapDown)
    , ("M-S-k", windows W.swapUp)
    , ("M-h", sendMessage Shrink)
    , ("M-l", sendMessage Expand)
    ]
#+END_SRC

** Layouts

#+BEGIN_SRC haskell
myLayout = avoidStruts . smartBorders $ mySpacing myTiled ||| mySpacing (Mirror myTiled) ||| mySpacing myThreeCol ||| noBorders Full
  where
    mySpacing = spacingRaw False (Border 2 2 2 2) True (Border 2 2 2 2) True
    myTiled = renamed [Replace "Tall"] $ Tall 1 (3/100) (1/2)
    myThreeCol = renamed [Replace "ThreeCol"] $ ThreeColMid 1 (3/100) (1/2)
#+END_SRC

** Manage Hook

#+BEGIN_SRC haskell
myManageHook :: ManageHook
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "GIMP"           --> doShift "gfx"
    , className =? "krita"          --> doShift "gfx"
    , className =? "Conky"          --> doIgnore
    , className =? "librewolf"      --> doShift "www"
    , className =? "firefox"        --> doShift "www"
    , className =? "Chromium"       --> doShift "www"
    , className =? "code"           --> doShift "dev"
    , className =? "VSCodium"       --> doShift "dev"
    , className =? "emacs"          --> doShift "dev"
    , className =? "vlc"            --> doShift "media"
    , className =? "Spotify"        --> doShift "media"
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore
    , isDialog                      --> doCenterFloat
    ] <+> namedScratchpadManageHook myScratchPads
#+END_SRC

** Scratchpads

#+BEGIN_SRC haskell
-- Scratchpad definitions
myScratchPads :: [NamedScratchpad]
myScratchPads =
    [ NS "terminal" spawnTerm findTerm manageTerm
    , NS "cmus" spawnCmus findCmus manageCmus
    , NS "htop" spawnHtop findHtop manageHtop
    ]
  where
    spawnTerm = myTerminal ++ " --title=scratchpad"
    findTerm = title =? "scratchpad"
    manageTerm = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 - h
                 l = 0.95 - w

    spawnCmus = myTerminal ++ " --title=cmus -e cmus"
    findCmus = title =? "cmus"
    manageCmus = customFloating $ W.RationalRect l t w h
               where
                 h = 0.6
                 w = 0.8
                 t = 0.7 - h
                 l = 0.9 - w

    spawnHtop = myTerminal ++ " --title=htop -e htop"
    findHtop = title =? "htop"
    manageHtop = customFloating $ W.RationalRect l t w h
               where
                 h = 0.8
                 w = 0.8
                 t = 0.9 - h
                 l = 0.9 - w
#+END_SRC

** Xmobar Config

#+BEGIN_SRC haskell
-- Xmobar configuration with matching theme colors
myXmobarPP :: Handle -> PP
myXmobarPP xmproc = def
    { ppOutput          = hPutStrLn xmproc
    , ppSep             = xmobarColor comment "" " â€¢ "
    , ppTitleSanitize   = xmobarStrip
    , ppCurrent         = wrap " " "" . xmobarColor pink "" . wrap "[" "]"
    , ppVisible         = wrap " " "" . xmobarColor blue "" . wrap "(" ")"
    , ppHidden          = wrap " " "" . xmobarColor foreground ""
    , ppHiddenNoWindows = wrap " " "" . xmobarColor comment ""
    , ppUrgent          = wrap " " "" . xmobarColor background red . wrap "!" "!"
    , ppTitle           = xmobarColor yellow "" . shorten 60
    , ppLayout          = xmobarColor aqua "" .
                         (\x -> case x of
                             "Tall"         -> " []= "
                             "Mirror Tall"  -> " TTT "
                             "ThreeCol"     -> " ||| "
                             "Full"         -> " [ ] "
                             "Spacing Tall" -> " [.]= " 
                             _              -> " " ++ x ++ " ")
    , ppOrder           = \[ws, l, t] -> [ws, l, t]
    }
#+END_SRC

** Startup Hook

#+BEGIN_SRC haskell
myStartupHook = do
    setWMName "LG3D"
    spawnOnce "xrandr --output eDP-1 --primary --mode 1920x1080 --pos 0x0 --rotate normal &"
    spawnOnce "nm-applet &"
    spawnOnce "compton &"
    spawnOnce "nitrogen --restore &"
    spawnOnce "stalonetray &"
    spawnOnce "caffeine-indicator &"
#+END_SRC

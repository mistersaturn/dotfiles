#+auto_tangle: t
#+title: Emacs Config
#+author: Dean Smith
#+date: 08/23/2025 - Last Modified: 08/30/2025
#+description: Personal Emacs Config -- TREEMACS Version
#+startup: showeverything
#+property: header-args:emacs-lisp :tangle init.el

#+begin_src emacs-lisp
;;; emacs/init.el -*- lexical-binding: t; no-byte-compile: t; coding: utf-8-unix; -*-
#+end_src

* Table of Contents :TOC:
- [[#elpaca-bootstrap][Elpaca Bootstrap]]
- [[#evil-mode][Evil Mode]]
  - [[#initialize][Initialize]]
- [[#evil-collection][Evil Collection]]
- [[#evil-tutor][Evil Tutor]]
- [[#general-keybinding-framework][General (Keybinding Framework)]]
  - [[#leader-key-setup][Leader Key Setup]]
  - [[#utility-keybindings][Utility Keybindings]]
  - [[#buffer-keybindings][Buffer Keybindings]]
  - [[#evaluation-keybindings][Evaluation Keybindings]]
  - [[#whichkey][WhichKey]]
- [[#dired-file-manager][Dired (File Manager)]]
  - [[#dired-open][Dired Open]]
  - [[#dired-all-the-icons][Dired (All The Icons)]]
- [[#marginalia][Marginalia]]
- [[#modeline-formatting][Modeline Formatting]]
- [[#org-mode][Org Mode]]
  - [[#org-auto-tangle][Org Auto Tangle]]
  - [[#org-bullets][Org Bullets]]
  - [[#org-directory][Org Directory]]
  - [[#org-electric-indent][Org Electric Indent]]
  - [[#org-tempo][Org Tempo]]
- [[#splash-screen-dashboard][Splash Screen (Dashboard)]]
  - [[#dashboard-banner-title-color][Dashboard Banner Title Color]]
  - [[#dashboard][Dashboard]]
  - [[#neotree-for-dashboard][Neotree for Dashboard]]
- [[#trash-can][Trash Can]]
- [[#vertico][Vertico]]
- [[#zooming][Zooming]]

* Elpaca Bootstrap
** Package Manager Foundation
Elpaca is a modern package manager for Emacs that provides better performance and more control than the built-in package.el. This bootstrap section ensures Elpaca is available and properly initialized before any other packages are loaded. The bootstrap process handles cloning the repository, compiling it, and setting up autoloads automatically.

#+begin_src emacs-lisp
;; Elpaca package manager bootstrap - handles downloading and initial setup
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order
  '(elpaca :repo "https://github.com/progfolio/elpaca.git"
           :ref nil :depth 1 :inherit ignore
           :files (:defaults "elpaca-test.el" (:exclude "extensions"))
           :build (:not elpaca--activate-package)))

;; Bootstrap installation logic - clones, compiles, and loads Elpaca
(let* ((repo (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process
                                 `("git" nil ,buffer t "clone"
                                   ,@(when-let* ((depth (plist-get order :depth)))
                                       (list (format "--depth=%d" depth)
                                             "--no-single-branch"))
                                   ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval"
                                        "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))

;; Ensure Elpaca processes all queued packages after Emacs initialization
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
(elpaca-wait) ;; Block until Elpaca bootstrap completes

;; Enable use-package syntax support for Elpaca
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
#+end_src

* Dired (File Manager Enhancement)
Enhanced file management capabilities for Emacs' built-in Dired mode, adding external application integration and visual improvements.

** Dired Open
Allows opening files in external applications directly from Dired. This is particularly useful for media files, images, and documents that are better handled by specialized applications rather than Emacs.

#+begin_src emacs-lisp
(use-package dired-open
  :ensure t
  :config
  ;; Define associations between file extensions and external programs
  ;; Customize these based on your preferred applications
  (setq dired-open-extensions
    '(("gif" . "gimp")      ;; Open GIF images in GIMP
      ("jpg" . "gimp")      ;; Open JPEG images in GIMP  
      ("png" . "gimp")      ;; Open PNG images in GIMP
      ("xcf" . "gimp")      ;; Open GIMP's native format in GIMP
      ("mkv" . "vlc")       ;; Open MKV videos in VLC
      ("mp4" . "vlc")       ;; Open MP4 videos in VLC
      ("kra" . "krita"))))  ;; Open Krita files in Krita
#+end_src

** Dired (All The Icons)
Adds beautiful icons to Dired file listings, making it easier to quickly identify file types and improving the overall visual experience of file browsing.

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  ;; Automatically enable icons in all Dired buffers
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

* Emojify
** Unicode Emoji Support
Enables emoji rendering throughout Emacs, converting text representations (like :smile:) into actual emoji characters. Useful for modern text editing and communication.

#+begin_src emacs-lisp
(use-package emojify
  :ensure t
  ;; Enable emoji support globally after Emacs finishes initializing
  :hook (after-init . global-emojify-mode))
#+end_src

* Evil Mode
** Vim Emulation Layer
Evil Mode brings Vim's modal editing paradigm to Emacs, providing efficient text manipulation through normal, insert, and visual modes. The comment "VI do you do this to yourself?" is a playful reference to the learning curve of modal editing.

** Initialize
Sets up Evil Mode with sensible defaults for window splitting behavior and integration preferences.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :demand t  ;; Load immediately, don't defer
  :init
  ;; Configuration that must happen before Evil Mode loads
  (setq evil-want-integration t      ;; Allow Evil to integrate with other packages
        evil-want-keybinding nil     ;; Disable default keybindings (we'll use evil-collection)
        evil-vsplit-window-right t   ;; New vertical splits appear on the right
        evil-split-window-below t)   ;; New horizontal splits appear below
  :config
  (evil-mode 1))  ;; Enable Evil Mode globally
#+end_src

** Evil Collection
Provides Evil Mode keybindings for hundreds of Emacs packages, ensuring consistent Vim-like behavior across the entire Emacs ecosystem. This eliminates the need to manually configure keybindings for each package.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil  ;; Load after Evil Mode is available
  :config
  ;; Only enable Evil keybindings for specific modes to avoid conflicts
  ;; Add more modes to this list as needed
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
#+end_src

** Evil Tutor
An interactive Vim tutorial built into Emacs, perfect for learning or refreshing Vim keybindings. Run with M-x evil-tutor-start.

#+begin_src emacs-lisp
(use-package evil-tutor :ensure t)
#+end_src

* General (Keybinding Framework)
General provides a unified interface for defining keybindings across different Emacs contexts and Evil states. It's particularly powerful for creating leader key workflows similar to Vim's Space-based configurations.

** Leader Key Setup
Establishes SPC as the leader key (with M-SPC as fallback for non-Evil states), creating a discoverable and organized keybinding hierarchy.

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :after evil
  :config
  (general-evil-setup)  ;; Enable Evil Mode integration
  
  ;; Create a leader key definer function
  ;; SPC in normal/visual modes, M-SPC everywhere else
  (general-create-definer tree/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override  ;; Override other keymaps to ensure our bindings work
    :prefix "SPC"       ;; Leader key in Evil states
    :global-prefix "M-SPC")  ;; Leader key in non-Evil contexts

  ;; Define all keybindings within the same use-package block
  ;; This ensures tree/leader-keys is available when we use it
  
  ;; Utility Keybindings - Essential operations organized under leader key
  (tree/leader-keys
    "." '(find-file :wk "Find file")  ;; Quick file access
    
    ;; Direct access to configuration file for easy editing
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) 
            :wk "Open config file")
    
    "TAB TAB" '(comment-line :wk "Comment lines")  ;; Toggle line comments
    
    ;; Help system access - Emacs has excellent built-in documentation
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")    ;; Function documentation
    "h v" '(describe-variable :wk "Describe variable")    ;; Variable documentation
    
    ;; Reload configuration without restarting Emacs
    "h r r" '((lambda ()
                (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload config"))

  ;; Buffer Keybindings - Buffer management commands under 'b' prefix
  (tree/leader-keys
    "b"  '(:ignore t :wk "Buffers")
    "b b" '(switch-to-buffer :wk "Switch buffer")      ;; Interactive buffer switching
    "b i" '(ibuffer :wk "Ibuffer")                     ;; Advanced buffer management interface
    "b k" '(kill-this-buffer :wk "Kill buffer")        ;; Close current buffer
    "b m" '(bookmark-set :wk "Set bookmark")           ;; Create bookmark at current location
    "b n" '(next-buffer :wk "Next buffer")             ;; Cycle to next buffer
    "b p" '(previous-buffer :wk "Previous buffer")     ;; Cycle to previous buffer  
    "b r" '(revert-buffer :wk "Reload buffer"))        ;; Refresh buffer from disk

  ;; Evaluation Keybindings - Elisp code evaluation for interactive development
  (tree/leader-keys
    "e" '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")                    ;; Run entire buffer
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")     ;; Run function definition
    "e e" '(eval-expression :wk "Evaluate an elisp expression")            ;; Interactive evaluation
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")   ;; Run expression before cursor
    "e r" '(eval-region :wk "Evaluate elisp in region")))                  ;; Run selected region
#+end_src

** WhichKey
** WhichKey
Provides popup help for keybinding discovery. When you press a prefix key (like SPC), WhichKey shows available completions with descriptions, making the interface self-documenting.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode 1)  ;; Enable globally
  :config
  ;; Customize the appearance and behavior of the which-key popup
  (setq which-key-side-window-location 'bottom    ;; Show popup at bottom
        which-key-sort-uppercase-first nil        ;; Sort alphabetically  
        which-key-add-column-padding 1            ;; Add spacing between columns
        which-key-max-display-columns nil         ;; Use as many columns as needed
        which-key-min-display-lines 6             ;; Minimum popup height
        which-key-side-window-slot -10            ;; Window priority
        which-key-side-window-max-height 0.25     ;; Max 25% of frame height
        which-key-idle-delay 0.8                  ;; Show popup after 0.8 seconds
        which-key-max-description-length 25       ;; Truncate long descriptions
        which-key-allow-imprecise-window-fit t    ;; Allow flexible sizing
        which-key-separator "  "))                ;; Visual separator between key and description
#+end_src

* Git Time Machine
** Version History Navigation
Provides an interactive interface for browsing the Git history of a file. You can step through commits to see how the file changed over time, making it invaluable for understanding code evolution and debugging.

#+begin_src emacs-lisp
(use-package git-timemachine
 :ensure t
 :after git-timemachine
 ;; Set up Evil-friendly keybindings when entering git-timemachine-mode
 :hook (evil-normalize-keymaps . git-timemachine-hook)
 :config
   ;; Vim-like navigation through Git history
   (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
   (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src

* Marginalia
** Enhanced Completion Annotations
Adds rich contextual information to completion candidates (like file paths, function signatures, variable values). This makes Emacs' completion system much more informative and user-friendly.

#+begin_src emacs-lisp
(use-package marginalia
 :after vertico  ;; Load after Vertico completion framework
 :ensure t
 :custom
 ;; Use detailed annotations by default, fall back to lighter ones if needed
 (setq marginalia-annotators
   '(marginalia-annotators-heavy marginalia-annotators-light)) 
 :init
 (marginalia-mode))  ;; Enable globally
#+end_src

* Modeline Formatting
** Custom Status Bar Design
A completely custom modeline design that replaces Emacs' default status bar with a more visually appealing and informative layout. Features custom colors, icons, and a right-aligned clock.

#+begin_src emacs-lisp
;; Nerd Icons provide beautiful file type and mode icons
(use-package nerd-icons
  :ensure t)

;; Custom color scheme for the modeline
(custom-set-faces
 '(mode-line ((t (:background "#282c34" :foreground "#abb2bf" :box nil))))
 '(mode-line-inactive ((t (:background "#1c1f24" :foreground "#5c6370" :box nil)))))

;; Custom face for buffer name section
(defface treemacs-modeline-buffer-namecol
  '((t (:background "#423f78" :foreground "#87e884" :inherit bold)))
  "Face for the Treemacs modeline buffer name color."
  :group 'treemacs)

;; Custom face for major mode section  
(defface treemacs-modeline-major-mode-namecol
  '((t (:background "#3357d3" :foreground "#83e0d0" :inherit bold)))
  "Face for the Treemacs modeline major mode color."
  :group 'treemacs)

;; Format buffer name with padding
(defun treemacs-modeline--buffer-name ()
  (format " %s " (buffer-name)))

;; Format major mode with appropriate icon and cleaned name
(defun treemacs-modeline--major-mode ()
  (let ((icon (or (nerd-icons-icon-for-mode major-mode)
          (nerd-icons-faicon "nf-fa-file_text_o"))) ;; fallback icon
    (name (capitalize (string-remove-suffix "-mode" (symbol-name major-mode)))))
    (format " %s  %s " icon name)))

;; Create flexible spacing for right-aligned elements
(defun treemacs-modeline--fill-right (reserve)
  "Return empty space leaving RESERVE space on the right."
  (propertize " "
      'display `((space :align-to (- (+ right right-fringe right-margin) ,reserve)))))

;; Format current time and date
(defun treemacs-modeline--clock ()
  "Return formatted time string."
  (format-time-string " %a 󰸗 %b %d  %I:%M %p"))

;; Define modeline segments as buffer-local variables
(defvar-local treemacs-modeline-buffer-name
  '(:eval (propertize (treemacs-modeline--buffer-name)
          'face 'treemacs-modeline-buffer-namecol)))

(defvar-local treemacs-modeline-major-mode
  '(:eval (propertize (treemacs-modeline--major-mode)
          'face 'treemacs-modeline-major-mode-namecol)))

;; Assemble the complete modeline format
(setq-default mode-line-format
      '("%e"  ;; Error indicator
        "  ::  "  ;; Visual separator
        treemacs-modeline-buffer-name
        " 󰚟 "  ;; Icon separator
        treemacs-modeline-major-mode
        "   "
        mode-line-position  ;; Cursor position info
        "  "
        vc-mode  ;; Version control status
        ;; Dynamic padding for right-aligned clock
        (:eval (treemacs-modeline--fill-right 28))
        ;; Right-aligned clock
        (:eval (treemacs-modeline--clock))))

;; Update the clock every minute
(run-at-time t 60 (lambda () (force-mode-line-update t)))

;; Mark custom variables as safe for buffer-local use
(put 'treemacs-modeline-buffer-name 'risky-local-variable t)
(put 'treemacs-modeline-major-mode 'risky-local-variable t)
#+end_src

* Org Mode
** Literate Programming and Document Authoring
Org Mode is Emacs' killer feature - a powerful markup language and organizational system that supports literate programming, task management, note-taking, and document publishing.

** Org Auto Tangle
Automatically extracts and saves code blocks from Org files to separate source files when the Org file is saved. This enables literate programming where documentation and code live together but can be executed separately.

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :defer t  ;; Only load when Org mode is used
  ;; Enable auto-tangling in all Org mode buffers
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Org Bullets  
Replaces Org mode's default asterisk headers with beautiful Unicode bullets, making documents more visually appealing and easier to scan.

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  ;; Enable pretty bullets in all Org mode buffers
  :hook (org-mode . org-bullets-mode))
#+end_src

** Org Directory
Sets the default location for Org files. This becomes the default directory for org-agenda and other Org commands that search for files.

#+begin_src emacs-lisp
;; Set default directory for Org files - customize this path as needed
(setq org-directory "~/org/")
#+end_src

** Org Electric Indent
Disables automatic indentation in Org mode, which can interfere with the natural flow of writing and code block formatting. Also ensures code blocks aren't artificially indented.

#+begin_src emacs-lisp
;; Disable electric indentation globally - prevents unwanted auto-indenting
(electric-indent-mode -1)
;; Ensure code blocks start at column 0 for proper execution
(setq org-edit-src-content-indentation 0)
#+end_src

** Org Tempo
Enables convenient snippet expansion for common Org structures. For example, typing "<s" and pressing TAB creates a source code block template.

#+begin_src emacs-lisp
;; Enable template expansion (e.g., <s TAB for source blocks)
(require 'org-tempo)
#+end_src

* Splash Screen (Dashboard)
** Custom Welcome Interface
Replaces Emacs' default startup screen with a beautiful, functional dashboard that provides quick access to recent files, projects, and other commonly-used features.

** Dashboard Banner Title Color
Custom styling for the dashboard title. The title "TREEMACS Really Whoops The Unicorn's Ass!" is a playful reference to the author's configuration theme.

#+begin_src emacs-lisp
;; Define custom title text for the dashboard
(defun dashboard-banner-title ()
  "Set a colorful title for the dashboard banner."
  (propertize "TREEMACS Really Whoops The Unicorn's Ass!"))

;; Set custom colors for the dashboard title
(custom-set-variables)
(custom-set-faces
 '(dashboard-banner-logo-title ((t (:inherit default :foreground "spring green")))))
#+end_src

** Dashboard    
The main dashboard configuration, creating a modern startup screen with quick access to recent files, agenda items, bookmarks, and projects.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  ;; Replace default startup screen with dashboard
  (setq initial-buffer-choice 'dashboard-open)
  
  ;; Enable icons for headings and files (requires nerd-icons/all-the-icons)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  
  ;; Set custom title
  (setq dashboard-banner-logo-title (dashboard-banner-title))
  
  ;; Banner options: use custom image instead of default Emacs logo
  ;;(setq dashboard-startup-banner 'logo) ;; uncomment for standard Emacs logo
  (setq dashboard-startup-banner "~/.config/emacs/.images/splash.png")
  
  (setq dashboard-center-content t) ;; Center all content horizontally
  
  ;; Configure dashboard sections and their item counts
  (setq dashboard-items '((recents . 5)      ;; 5 recent files
              (agenda . 5 )      ;; 5 upcoming agenda items  
              (bookmarks . 3)    ;; 3 bookmarks
              (projects . 3)     ;; 3 recent projects
              (registers . 3)))  ;; 3 stored registers
  :custom 
  ;; Customize section icons
  (dashboard-modify-heading-icons '((recents . "file-text")
                    (bookmarks . "book")))
  :config
  ;; Initialize dashboard after Emacs starts
  (dashboard-setup-startup-hook))
#+end_src

** Neotree for Dashboard
Automatically opens a file tree sidebar when the dashboard loads, creating an IDE-like interface. The configuration ensures this only happens once to avoid repeatedly opening Neotree.

#+begin_src emacs-lisp
;; File tree sidebar for IDE-like experience
(use-package neotree
  :ensure t
  :after dashboard
  :config
  ;; Configure Neotree appearance and behavior
  (setq neo-window-width 15              ;; Sidebar width in characters
        neo-window-fixed-size nil        ;; Allow resizing  
        neo-smart-open t                 ;; Auto-expand to current file
        neo-show-hidden-files t          ;; Show dotfiles
        neo-autorefresh t                ;; Auto-update when files change
        neo-theme (if (display-graphic-p) 'nerd-icons 'ascii)  ;; Use icons in GUI
        neo-window-position 'left        ;; Position sidebar on left
        neo-mode-line-type 'neotree)     ;; Custom modeline for tree

  ;; State tracking to prevent reopening Neotree multiple times
  (defvar my/dashboard-neotree-opened nil
    "Prevent Neotree from reopening after the dashboard initializes once.")

  ;; Auto-open Neotree when dashboard loads (once per session)
  (add-hook 'dashboard-after-initialize-hook
            (lambda ()
              (unless my/dashboard-neotree-opened
                ;; Determine appropriate root directory (project or config directory)
                (let ((root (or (ignore-errors (project-root (project-current)))
                                user-emacs-directory)))
                  (neotree-show)      ;; Open the tree
                  (neotree-dir root)  ;; Set root directory
                  (other-window 1))   ;; Return focus to dashboard
                (setq my/dashboard-neotree-opened t)))))
#+end_src
  
* Trash Can
** Responsible File Deletion
Configures Emacs to use the system trash instead of permanently deleting files, providing a safety net for accidental deletions. Also manages backup files responsibly.

#+begin_src emacs-lisp
;; Use system trash instead of permanent deletion - safety first!
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")

;; Move backup files to trash instead of cluttering directories  
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files/")))
#+end_src

* Vertico
** Modern Completion Interface
Vertico provides a clean, minimal completion interface that enhances Emacs' built-in completion system. It's faster and more predictable than older completion frameworks like Helm or Ivy.

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
         ;; Vim-like navigation in completion list
         ("C-j" . vertico-next)      ;; Move down in completions
         ("C-k" . vertico-previous)  ;; Move up in completions  
         ("C-f" . vertico-exit)      ;; Accept current selection
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))  ;; Better word deletion
  :custom
  (vertico-cycle t)  ;; Allow wrapping from bottom to top and vice versa
  :init
  (vertico-mode))  ;; Enable globally
#+end_src

* Zooming
## Text Size Control
Provides convenient keybindings for adjusting text size both with keyboard shortcuts and mouse wheel, improving accessibility and readability.

#+begin_src emacs-lisp
;; Keyboard shortcuts for text scaling
(global-set-key (kbd "C-=") 'text-scale-increase)    ;; Make text larger
(global-set-key (kbd "C--") 'text-scale-decrease)    ;; Make text smaller

;; Mouse wheel support for text scaling (with Ctrl modifier)
(global-set-key [C-wheel-up] 'text-scale-increase)    ;; Ctrl + scroll up = bigger text
(global-set-key [C-wheel-down] 'text-scale-decrease)  ;; Ctrl + scroll down = smaller text
#+end_src
